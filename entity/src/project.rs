//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.10

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "project")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub name: String,
    pub leader_id: Option<i32>,
    pub permission: Option<i32>,
    pub priority: i32,
    pub content: String,
    pub start_time: Option<String>,
    pub end_time: Option<String>,
    pub is_checked: bool,
    pub created_at: String,
    pub updated_at: String,
    pub creator_id: Option<i32>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::account::Entity",
        from = "Column::LeaderId",
        to = "super::account::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Account2,
    #[sea_orm(
        belongs_to = "super::account::Entity",
        from = "Column::CreatorId",
        to = "super::account::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Account1,
    #[sea_orm(
        belongs_to = "super::permission::Entity",
        from = "Column::Permission",
        to = "super::permission::Column::Level",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Permission,
    #[sea_orm(has_many = "super::todo::Entity")]
    Todo,
}

impl Related<super::permission::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Permission.def()
    }
}

impl Related<super::todo::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Todo.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
