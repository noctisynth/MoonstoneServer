//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.10

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "todo")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub project_id: Option<i32>,
    pub name: String,
    pub owner_id: Option<i32>,
    pub permission: Option<i32>,
    pub priority: i32,
    pub content: String,
    pub description: String,
    pub startline: Option<String>,
    pub endline: Option<String>,
    pub parent: Option<i32>,
    pub is_checked: bool,
    pub created_at: String,
    pub updated_at: String,
    pub creator_id: Option<i32>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::account::Entity",
        from = "Column::OwnerId",
        to = "super::account::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Account2,
    #[sea_orm(
        belongs_to = "super::account::Entity",
        from = "Column::CreatorId",
        to = "super::account::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Account1,
    #[sea_orm(
        belongs_to = "super::permission::Entity",
        from = "Column::Permission",
        to = "super::permission::Column::Level",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Permission,
    #[sea_orm(
        belongs_to = "super::project::Entity",
        from = "Column::ProjectId",
        to = "super::project::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Project,
    #[sea_orm(
        belongs_to = "Entity",
        from = "Column::Parent",
        to = "Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    SelfRef,
}

impl Related<super::permission::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Permission.def()
    }
}

impl Related<super::project::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Project.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
